// Generated by CoffeeScript 1.8.0
(function() {
  var checkingStatus, env, page, runCoverage, system;

  page = require('webpage').create();

  system = require('system');

  env = system.env;

  console.log("phantomjs: Running tests at " + system.env.ROOT_URL + " using test-in-console and coverage");

  page.onConsoleMessage = function(message) {
    return console.log(message);
  };

  page.open(system.env.ROOT_URL);

  page.onError = function(msg, trace) {
    var mochaIsRunning;
    mochaIsRunning = page.evaluate(function() {
      return window.mochaIsRunning;
    });
    if (mochaIsRunning) {
      return;
    }
    console.log("phantomjs: " + msg);
    trace.forEach(function(item) {
      return console.log("    " + item.file + ": " + item.line);
    });
    return phantom.exit(6);
  };

  page.onCallback = function(data) {
    if (data && data.err) {
      console.log("coverage error: " + data.err);
      return phantom.exit(7);
    } else {
      return phantom.exit(0);
    }
  };

  checkingStatus = setInterval(function() {
    var done, error, exportCoverageDump, exportLcovonly, failures, importCoverageDump;
    done = page.evaluate(function() {
      if (typeof TEST_STATUS !== "undefined" && TEST_STATUS !== null) {
        return TEST_STATUS.DONE;
      }
      if (typeof DONE !== "undefined" && DONE !== null) {
        return DONE;
      }
      return false;
    });
    if (done) {
      failures = page.evaluate(function() {
        if (typeof TEST_STATUS !== "undefined" && TEST_STATUS !== null) {
          return TEST_STATUS.FAILURES;
        }
        if (typeof FAILURES !== "undefined" && FAILURES !== null) {
          return FAILURES;
        }
        return false;
      });
      if (failures) {
        return phantom.exit(2);
      } else {
        clearInterval(checkingStatus);
        try {
          importCoverageDump = env.COVERAGE_IN_COVERAGE === "true";
          exportCoverageDump = env.COVERAGE_OUT_COVERAGE === "true";
          exportLcovonly = env.COVERAGE_OUT_LCOVONLY === "true";
          return page.evaluate(runCoverage, importCoverageDump, exportCoverageDump, exportLcovonly);
        } catch (_error) {
          error = _error;
          return window.callPhantom({
            err: error
          });
        }
      }
    }
  }, 500);

  runCoverage = function(importCoverageDump, exportCoverageDump, exportLcovonly) {
    window.assertCoverageEnabled = function(onSuccess) {
      if (!Package || !Package['meteor'] || !Package['meteor']['Meteor'] || !Package['meteor']['Meteor'].sendCoverage || !Package['meteor']['Meteor'].exportCoverage) {
        return window.callPhantom({
          err: "Coverage package missing or not correclty launched"
        });
      } else {
        return onSuccess();
      }
    };
    window.saveClientSideCoverage = function(onSuccess) {
      return Package['meteor']['Meteor'].sendCoverage(function(stats, err) {
        console.log("tests are ok and some js on the client side have been covered. Report: ", JSON.stringify(stats));
        if (err) {
          return window.callPhantom({
            err: "Failed to send client coverage"
          });
        } else {
          return onSuccess();
        }
      });
    };
    window.exportLcovonly = function(onSuccess) {
      return Package['meteor']['Meteor'].exportCoverage('lcovonly', function(err) {
        if (err) {
          return window.callPhantom({
            err: "Failed to save lcovonly coverage"
          });
        } else {
          return onSuccess();
        }
      });
    };
    window.exportCoverageDump = function(onSuccess) {
      return Package['meteor']['Meteor'].exportCoverage('coverage', function(err) {
        if (err) {
          return window.callPhantom({
            err: "Failed to save coverage dump"
          });
        } else {
          return onSuccess();
        }
      });
    };
    window.importCoverageDump = function(onSuccess) {
      return Package['meteor']['Meteor'].importCoverage(function(err) {
        if (err) {
          return window.callPhantom({
            err: "Failed to import coverage dump"
          });
        } else {
          return onSuccess();
        }
      });
    };
    return window.assertCoverageEnabled(function() {
      return window.saveClientSideCoverage(function() {
        var stepFurtherImportCoverageDump;
        stepFurtherImportCoverageDump = function() {
          var stepFurtherExportCoverageDump;
          stepFurtherExportCoverageDump = function() {
            if (exportLcovonly) {
              return window.exportLcovonly(function() {
                return window.callPhantom({
                  success: "true"
                });
              });
            } else {
              return window.callPhantom({
                success: "true"
              });
            }
          };
          if (exportCoverageDump) {
            return window.exportCoverageDump(stepFurtherExportCoverageDump);
          } else {
            return stepFurtherExportCoverageDump();
          }
        };
        if (importCoverageDump) {
          return window.importCoverageDump(stepFurtherImportCoverageDump);
        } else {
          return stepFurtherImportCoverageDump();
        }
      });
    });
  };

}).call(this);
